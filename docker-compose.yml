version: '3.8'

# Pulse Development Environment - Staff Engineer Setup
# Uses Podman-compatible Docker Compose format

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: pulse-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-pulse}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d pulse"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - pulse-network

  # FastAPI Backend
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
      target: development
    container_name: pulse-api
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-pulse}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - LINEAR_API_KEY=${LINEAR_API_KEY:-}
      - LINEAR_TEAM_ID=${LINEAR_TEAM_ID:-}
      - GITHUB_TOKEN=${GITHUB_TOKEN:-}
      - DEBUG=true
      - LOG_LEVEL=DEBUG
      - API_HOST=0.0.0.0
      - API_PORT=8000
      # Override with real values in .env file
      - GITHUB_TOKEN=${GITHUB_TOKEN:-test_token}
      - LINEAR_API_KEY=${LINEAR_API_KEY:-test_key}
      - LINEAR_TEAM_ID=${LINEAR_TEAM_ID:-test_team}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-test_openai_key}
    volumes:
      - ./api:/app:ro
      - ./db:/app/db:ro
      - api_cache:/app/.cache
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - pulse-network
    restart: unless-stopped

  # Next.js Frontend  
  web:
    build:
      context: ./web
      dockerfile: Dockerfile
      target: development
    container_name: pulse-web
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_BASE_URL=http://localhost:8000
      - WATCHPACK_POLLING=true
    volumes:
      - ./web:/app:ro
      - web_node_modules:/app/node_modules
      - web_cache:/app/.next
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - pulse-network
    restart: unless-stopped

  # Redis for caching (staff-level addition)
  redis:
    image: redis:7-alpine
    container_name: pulse-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - pulse-network
    restart: unless-stopped

  # Nginx reverse proxy (production-ready)
  nginx:
    image: nginx:alpine
    container_name: pulse-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
      - web
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - pulse-network
    restart: unless-stopped
    profiles: ["production"]

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  api_cache:
    driver: local
  web_node_modules:
    driver: local
  web_cache:
    driver: local

networks:
  pulse-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16